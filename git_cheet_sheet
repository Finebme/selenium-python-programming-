the staging area is a file,generally contained in your Git directory,that stores info ablout what will go into your next commit.

git has three main states that your files reside in : modified,staged and committed
1. modify files in working tree.
2. stage the changes to the staging area , which will be part of your next commit
3. commit. git stores that snapshot permanently to Git directory

modified->staged->committed

git config --global 
git config (this affect a ceartain proj instead of global)

config files exist in ./git and /{home}/.gitconfig

git help config
git help add

.gitignore cat be mutiple,both activate in root path and subdirecories.
*.[oa] ignore any files ending in ".o" or ".a"
it is possible to have additional .gitignore files in subdirectories

git status -s  you get a far more simplified output from the command

git diff   compare working tree with the staged area
git diff --staged    compare staged area with the last commit
git diff --cached    synonyms as --staged

git difftool   use a tool like vimdiff to help view diffs

git remove 
git remove -f  if it's already in the staging area.
git remove --cached filename   tell the git no longer keep track the file,but you need it in your hardware. It's particularly useful when you accidentally staged it and forget to add it to .gitignore

git log -p   show the patch
git log -2    limits the entry to 2

gg -> first line; shift+g -> last line;
:1 -> first line; :$ -> last line

git log --stat  show the statistic data
git log --pretty=oneline
git log --pretty=short/full/fuller
git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format:"%h %an %ar: %s" --graph

filter option
git log --since=2.weeks
git log --author=somebody
git log --grep=somewordsinsubject
git log -S stringinchangefiles
git log -- path/to/file

git log --pretty="%h - %s" --author='Juno C Hamano' --since="2008-10-01" --before="2008-11-01" --no-merges -- t

"Oops,forgot to add a file" or "darn,fixing a typo in last commit"
git commit --amend to avoid the sentence upward

git reset HEAD file   unstaged a staged file
git checkout -- file    withdrawed all the localchanges

git restore --staged file
git restore file

restore uses to replace reset and checkout


work with the remote
git remote
git remote -v   show all the remote ,both name and url
git remote show origin   show origin detail

git remote rename a b
git remote add a a's url
git remote remove a

the tag thing,two types, never used it, pass today soorrry

git checkout -b newbranch
git switch -c newbranch
these two both create a new branch and switch to it.

git merge bemerged
guarantee that your branch's working tree is clean,which means commit already.Otherwise! suffer the consequence!

git mergetool   you get a inner-file-comparator

git branch -v   to see the last commit of each branch
git branch --merged
git branch --no-merged
filter the branch has been merged or no-merged 

git branch --no-merged master
show the branch which haven't been merged into the master

git branch --move old-branch-name new-branch-name
git push --set-upstream origin upstream-repo
rename a local branch
relate to remote branch

git branch --all   show all the branches both local and remote

git push localbranch origin branch
add a new branch on remote server

git push origin --delete old-branch-name
delete certain remote branch

git checkout -b branchname origin/branchname
new a local branch to track the remote one

git checkout hotfix
git rebase master
this makes the hofix to the same commit as the branch you are rebasing onto,works like merge but different in pointer,hard to describe,get some pics~

rebase makes the log history linear-like and clean(that's what they call it) 

merge VS rebase
you would rather to keep a intact historical document ,which means stuff can be messy but intact as it is, or rebase to make it simple because people care about the work not the draft or messy script.
So which one? Record of what actually happened or story of how your project was made.Tricky.
